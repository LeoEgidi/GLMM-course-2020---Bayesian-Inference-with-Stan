ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
summary(lm.D9)
y_prev <- array(1, c(4000, 10, 5))
dim(y_prev)
y_prev_est <- apply(y_prev, c(2,3), mean)
y_prev_est
y_prev_est <- apply(y_prev, c(2,3), median)
y_prev_est
y_prev_est <- apply(y_prev, c(2,3), sd)
y_prev_est
253+171+55+90+30+30
253+171+55+90+30+30+120
253+255+171+55+90+32+30+20
curve(exp(-20*x))
curve(exp(-20*x))
curve(exp(-2*x))
curve(exp(-0.22*x))
curve(exp(-0.1*x))
curve(exp(-0.1*x), xlim=c(0,20))
curve(exp(-0.1*x), xlim=c(0,30))
curve(exp(-0.1*x), xlim=c(0,50))
abline(v=32, col="red")
points(0, exp(-0.1*32), col="red")
points(32, exp(-0.1*32), col="red")
380*140
1120*140
140*2
140*3
159600/140
420*380
420*380/3
420*380/140
380*420
450*380
450*380/150
1140*140
200000/140
library(footBayes)
help(stan_foot)
citation(toBibtex("bayesplot"))
citation("bayesplot")
toBibtex(citation("bayesplot"))
toBibtex(citation("loo"))
M <- 100000; n1 <- 20; n2 <- 200; y1 <- y2 <- rep(NA, M)
for(i in 1:M) {y1[i] <- mean(rpois(n1, 1))
y2[i] <- mean(rpois(n2, 1))}
par(mfrow=c(1,2))
hist.scott(y1, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
hist.scott(y2, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
library(DAAG)
M <- 100000; n1 <- 20; n2 <- 200; y1 <- y2 <- rep(NA, M)
for(i in 1:M) {y1[i] <- mean(rpois(n1, 1))
y2[i] <- mean(rpois(n2, 1))}
par(mfrow=c(1,2))
hist.scott(y1, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
hist.scott(y2, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
library(MASS)
M <- 100000; n1 <- 20; n2 <- 200; y1 <- y2 <- rep(NA, M)
for(i in 1:M) {y1[i] <- mean(rpois(n1, 1))
y2[i] <- mean(rpois(n2, 1))}
par(mfrow=c(1,2))
hist.scott(y1, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
hist.scott(y2, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
M <- 100000; n1 <- 20; n2 <- 40; y1 <- y2 <- rep(NA, M)
for(i in 1:M) {y1[i] <- mean(rpois(n1, 1))
y2[i] <- mean(rpois(n2, 1))}
par(mfrow=c(1,2))
hist.scott(y1, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
hist.scott(y2, xlim=c(0,2), main="", xlab=""); abline(v=1,col=2)
M <- 100000; n <- 100; mat.y <- matrix(NA, nrow = M, ncol = 2)
for(i in 1:M) { x <- rbinom(n, size = 1, prob = 0.9)
y <- x * rnorm(n, 5) + (1 - x) * rnorm(x, 35)
mat.y[i,] <- c(mean(y), median(y))}
plot(density(mat.y[,2]), type="l", main="", xlim=c(4, 13),
col = 2)
lines(density(mat.y[,1]), col=1)
par(mfrow=c(1,1))
M <- 100000; n <- 100; mat.y <- matrix(NA, nrow = M, ncol = 2)
for(i in 1:M) { x <- rbinom(n, size = 1, prob = 0.9)
y <- x * rnorm(n, 5) + (1 - x) * rnorm(x, 35)
mat.y[i,] <- c(mean(y), median(y))}
plot(density(mat.y[,2]), type="l", main="", xlim=c(4, 13),
col = 2)
lines(density(mat.y[,1]), col=1)
M <- 100000; n <- 100; mat.y <- matrix(NA, nrow = M, ncol = 2)
for(i in 1:M) { x <- rbinom(n, size = 1, prob = 0.5)
y <- x * rnorm(n, 5) + (1 - x) * rnorm(x, 35)
mat.y[i,] <- c(mean(y), median(y))}
plot(density(mat.y[,2]), type="l", main="", xlim=c(4, 13),
col = 2)
lines(density(mat.y[,1]), col=1)
M <- 100000; n <- 100; mat.y <- matrix(NA, nrow = M, ncol = 2)
for(i in 1:M) { x <- rbinom(n, size = 1, prob = 0.5)
y <- x * rnorm(n, 5) + (1 - x) * rnorm(x, 35)
mat.y[i,] <- c(mean(y), median(y))}
plot(density(mat.y[,2]), type="l", main="", xlim=c(4, 13),
col = 2, xlim = c(0, 50))
lines(density(mat.y[,1]), col=1)
M <- 100000; n <- 100; mat.y <- matrix(NA, nrow = M, ncol = 2)
for(i in 1:M) { x <- rbinom(n, size = 1, prob = 0.5)
y <- x * rnorm(n, 5) + (1 - x) * rnorm(x, 35)
mat.y[i,] <- c(mean(y), median(y))}
plot(density(mat.y[,2]), type="l", main="", xlim=c(0, 50),
col = 2)
lines(density(mat.y[,1]), col=1)
M <- 100000; n <- 10; mat.ci <- matrix(NA, nrow = M, ncol = 2)
for(i in 1:M) { y <- rnorm(n, 5)
se_t <- sqrt(var(y) / n) * qt(0.975, n-1)
mat.ci[i,] <- mean(y) + se_t * c(-1, 1)}
mean(mat.ci[,1] < 5 & mat.ci[,2] > 5)
library(DAAG)
pair65
y <- pair65$heated-pair65$ambient
help(t.test)
t.test(y)
curve(dt, 8, xlim=c(-2,2))
curve(dt,0, 8, xlim=c(-2,2))
curve(dt(x,8), xlim=c(-2,2))
curve(dt(x,8), xlim=c(-4,4))
curve(dt(x,8), xlim=c(-6,6))
abline(v = 3.1)
segments(3.1, 0,3.1, dt(3.1, 8), col ="red")
curve(dt(x,8), xlim=c(-6,6))
segments(3.1, 0,3.1, dt(3.1, 8), col ="red")
segments(3.1, -0.1,3.1, dt(3.1, 8), col ="red")
qt(0.975, 8)
var(y)
mean(y)
mean(y)/sqrt(var(y)/n)
n<-length(y)
mean(y)/sqrt(var(y)/n)
coord.x <- c( 2.3, seq(2.3, Inf, 0.025), Inf )
coord.x <- c( 2.3, seq(2.3, 6, 0.025), Inf )
coord.y <- c( 0, seq(dt(2.3,8), dt(6,8), 0.025), 0 )
coord.y <- c( 0, dt(seq((2.3,8), dt(6,8), 0.025)), 0 )
coord.y <- c( 0, dt(seq((2.3,8), (6,8), 0.025),8), 0 )
coord.y <- c( 0, dt(seq((2.3), (6,8), 0.025),8), 0 )
coord.y <- c( 0, dt(seq((2.3), (6,8), 0.025),8), 0 )
coord.x
coord.y <- c( 0, dt(seq(2.3, 6, 0.025),8), 0 )
polygon(coord.x, coord.y, col="red")
pt(3.1,8)
1-pt(3.1,8)
2*(1-pt(3.1,8))
t.test(pair65$heated, pair65$ambient)
t.test(pair65$heated, pair65$ambient, paired = TRUE)
pair65$heated
pair65$ambient
t.test(pair65$heated, pair65$ambient, var.equal=TRUE, mu = 0)
t.test(y)
help("wilcox.test")
wilcox.test(y)
curve(dbeta(x, 2,2))
curve(dbeta(x, 5,5), add = TRUE)
curve(dbeta(x, 5,5), add = TRUE, col ="red")
curve(dbeta(x, 3,4))
3/4
3/(3+4)
curve(dbeta(x, 8,4))
8/(8+4)
curve(log(x/(1-x)), xlim=c(-10, 10))
curve(log(x/(1-x)), xlim=c(0, 10))
curve(log(x/(1-x)), xlim=c(0, 1))
curve(exp(x)/(1+exp(x)), lim=c(-10,10))
curve(exp(x)/(1+exp(x)), xlim=c(-10,10))
curve(log(x/(1-x)), xlim=c(0, 1))
exp(-1.7)
exp(-1.7)/(1+exp(-1.7))
exp(-0.1)
help(chisq.test)
x <- (3+2)^2
x
x <- (3+2)^2/2
x
regioni <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-regioni/dpc-covid19-ita-regioni.csv")
plot(regioni$terapia_intensiva[regioni$denominazione_regione=="Lazio"])
province <- read.csv("https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-province/dpc-covid19-ita-province.csv")
View(province)
province$codice_provincia=="UD"
province$totale_casi[province$codice_provincia=="UD"]
province$totale_casi[province$sigla_provincia=="UD"]
province$sigla_provincia=="UD"
province$totale_casi[province$sigla_provincia=="UD"]
province$totale_casi[province$codice_provincia==30]
tot_ud <- province$totale_casi[province$codice_provincia==30]
tot_ud
plot(tot_ud)
score <- read.table( file="student_score.txt", header=TRUE, sep="", dec="." )
# eigenratio statistic
psi_fun <- function(data) {
eig <- eigen(cor(data))$values
return(max(eig) / sum(eig))
}
psi_obs <- psi_fun(score) # psi-hat
n <- nrow(score)
B <- 10^4
s_vect <- z_vect <- rep(0, B)
library(DAAG)
score <- read.table( file="student_score.txt", header=TRUE, sep="", dec="." )
# eigenratio statistic
psi_fun <- function(data) {
eig <- eigen(cor(data))$values
return(max(eig) / sum(eig))
}
psi_obs <- psi_fun(score) # psi-hat
n <- nrow(score)
B <- 10^4
s_vect <- z_vect <- rep(0, B)
731+300+365
setwd("C:/Users/leoeg/OneDrive/Desktop")
library(rstan)
rstan:::rstudio_stanc("linear_regression.stan")
rstan:::rstudio_stanc("linear_regression.stan")
rstan:::rstudio_stanc("linear_regression.stan")
library(rstan)
library(dplyr)
library(lubridate)
library(ggplot2)
library(bayesplot)
theme_set(bayesplot::theme_default())
set.seed(1123)
pest_data <- readRDS('data/pest_data.RDS')
str(pest_data)
## ----describe-data-------------------------------------------------------
N_buildings <- length(unique(pest_data$building_id))
N_buildings
setwd("~/GitHub/GLMM-course-2020---Bayesian-Inference-with-Stan/Lab/cockroaches_example")
pest_data <- readRDS('data/pest_data.RDS')
str(pest_data)
## ----describe-data-------------------------------------------------------
N_buildings <- length(unique(pest_data$building_id))
N_buildings
## ----data-plots----------------------------------------------------------
ggplot(pest_data, aes(x = complaints)) +
geom_bar()
ggplot(pest_data, aes(x = traps, y = complaints, color = live_in_super == TRUE)) +
geom_jitter()
## ---- data-plots-ts, fig.width = 6, fig.height = 8-----------------------
ggplot(pest_data, aes(x = date, y = complaints, color = live_in_super == TRUE)) +
geom_line(aes(linetype = "Number of complaints")) +
geom_point(color = "black") +
geom_line(aes(y = traps, linetype = "Number of traps"), color = "black", size = 0.25) +
facet_wrap(~building_id, scales = "free", ncol = 2, labeller = label_both) +
scale_x_date(name = "Month", date_labels = "%b") +
scale_y_continuous(name = "", limits = range(pest_data$complaints)) +
scale_linetype_discrete(name = "") +
scale_color_discrete(name = "Live-in super")
## ----stan-data-----------------------------------------------------------
stan_dat_simple <- list(
N = nrow(pest_data),
complaints = pest_data$complaints,
traps = pest_data$traps
)
str(stan_dat_simple)
help("stan")
fit_P_real_data <- stan('stan_programs/simple_poisson_regression.stan',
data = stan_dat_simple)
## ----results_simple_P----------------------------------------------------
print(fit_P_real_data, pars = c('alpha','beta'))
## ----hist_simple_P-------------------------------------------------------
mcmc_hist(as.matrix(fit_P_real_data, pars = c('alpha','beta')))
mcmc_scatter(as.matrix(fit_P_real_data, pars = c('alpha','beta')), alpha = 0.2)
mcmc_trace(fit_P_real_data)
## ----extract_hypothetical_replications --------------------------------------------------------------------
y_rep <- as.matrix(fit_P_real_data, pars = "y_rep")
dim(y_rep)
## ----marginal_PPC--------------------------------------------------------
ppc_dens_overlay(y = stan_dat_simple$complaints, y_rep[1:200,])
## ----proportion_of_zero_statistic--------------------------------------------------------------------
prop_zero <- function(x) mean(x == 0)
ppc_stat(y = stan_dat_simple$complaints, yrep = y_rep, stat = "prop_zero")
ppc_stat(y = stan_dat_simple$complaints, yrep = y_rep, stat = "mean")
## ----standardized_residuals--------------------------------------------------------------------
mean_y_rep <- colMeans(y_rep)
std_resid <- (stan_dat_simple$complaints - mean_y_rep) / sqrt(mean_y_rep)
qplot(mean_y_rep, std_resid) + hline_at(2) + hline_at(-2)
## ----predictive_intervals--------------------------------------------------------------------
ppc_intervals(
y = stan_dat_simple$complaints,
yrep = y_rep,
x = stan_dat_simple$traps
) +
labs(x = "Number of traps", y = "Number of complaints")
## ------------------------------------------------------------------------
ggplot(pest_data, aes(x = log(total_sq_foot), y = log1p(complaints))) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
## ----add_some_data--------------------------------------------------------------------
stan_dat_simple$log_sq_foot <- log(pest_data$total_sq_foot/1e4)
stan_dat_simple$live_in_super <- pest_data$live_in_super
## ----fit_mult_P_real_dat-------------------------------------------------
## extend the previous model including one more predictor and the offset
## call the extra predictor 'live_in_super' and the offset 'log_sq_foot'
fit_model_P_mult_real <- stan('stan_programs/multiple_poisson_regression.stan',
data = stan_dat_simple)
## ------------------------------------------------------------------------
prop_zero <- function(x) mean(x == 0)
ppc_stat(y = stan_dat_simple$complaints, yrep = y_rep, stat = "prop_zero", binwidth = 0.01)
## ------------------------------------------------------------------------
ppc_intervals(
y = stan_dat_simple$complaints,
yrep = y_rep,
x = stan_dat_simple$traps
) +
labs(x = "Number of traps", y = "Number of complaints")
fitted_model_NB <- stan('stan_programs/multiple_NB_regression.stan',
data = stan_dat_simple)
samps_NB <- rstan::extract(fitted_model_NB)
mcmc_areas(fitted_model_NB, pars=c("alpha", "beta"),
prob = 0.95)
## ----ppc-full------------------------------------------------------------
y_rep <- samps_NB$y_rep
ppc_dens_overlay(stan_dat_simple$complaints, y_rep[1:200,])
## ------------------------------------------------------------------------
ppc_stat(y = stan_dat_simple$complaints, yrep = y_rep, stat = "prop_zero")
## ----standardized_residuals--------------------------------------------------------------------
mean_inv_phi <- mean(samps_NB$inv_phi)
mean_y_rep <- colMeans(y_rep)
std_resid <- (stan_dat_simple$complaints - mean_y_rep) / sqrt(mean_y_rep + mean_y_rep^2*mean_inv_phi)
qplot(mean_y_rep, std_resid) + hline_at(2) + hline_at(-2)
## ----predictive_intervals--------------------------------------------------------------------
ppc_intervals(
y = stan_dat_simple$complaints,
yrep = y_rep,
x = stan_dat_simple$traps
) +
labs(x = "Number of traps", y = "Number of complaints")
## ----ppc-group_means-----------------------------------------------------
ppc_stat_grouped(
y = stan_dat_simple$complaints,
yrep = y_rep,
group = pest_data$building_id,
stat = 'mean',
binwidth = 0.2
)
ppc_stat_grouped(
y = stan_dat_simple$complaints,
yrep = y_rep,
group = pest_data$building_id,
stat = 'sd',
binwidth = 0.2
)
library(rstan)
library(dplyr)
library(lubridate)
library(ggplot2)
library(bayesplot)
library(loo)
library(shinystan)
theme_set(bayesplot::theme_default())
# seed for R's pseudo-RNGs, not Stan's
set.seed(1123)
## ----load-data-----------------------------------------------------------
pest_data <- readRDS('data/pest_data.RDS')
str(pest_data)
## ----describe-data-------------------------------------------------------
N_buildings <- length(unique(pest_data$building_id))
N_buildings
## ----prep-data-----------------------------------------------------------
N_months <- length(unique(pest_data$date))
# Add some IDs for building and month
pest_data <- pest_data %>%
mutate(
building_fac = factor(building_id, levels = unique(building_id)),
building_idx = as.integer(building_fac),
ids = rep(1:N_months, N_buildings),
mo_idx = lubridate::month(date)
)
# Center and rescale the building specific data
building_data <- pest_data %>%
select(
building_idx,
live_in_super,
age_of_building,
total_sq_foot,
average_tenant_age,
monthly_average_rent
) %>%
unique() %>%
arrange(building_idx) %>%
select(-building_idx) %>%
scale(scale=FALSE) %>%
as.data.frame() %>%
mutate( # scale by constants
age_of_building = age_of_building / 10,
total_sq_foot = total_sq_foot / 10000,
average_tenant_age = average_tenant_age / 10,
monthly_average_rent = monthly_average_rent / 1000
) %>%
as.matrix()
# Make data list for Stan
stan_dat_hier <-
with(pest_data,
list(complaints = complaints,
traps = traps,
N = length(traps),
J = N_buildings,
log_sq_foot = log(pest_data$total_sq_foot/1e4),
building_data = building_data[,-3],
K = 4,
building_idx = building_idx
)
)
## ----comp-NB-hier-------------
comp_model_NB_hier <- stan_model('stan_programs/hier_NB_regression.stan')
## ----run-NB-hier---------------------------------------------------------
fitted_model_NB_hier <-
sampling(
comp_model_NB_hier,
data = stan_dat_hier,
chains = 4,
#   cores = 4,
iter = 4000
)
rstan:::rstudio_stanc("stan_programs/hier_NB_regression.stan")
rstan:::rstudio_stanc("stan_programs/hier_NB_regression.stan")
## ----extract_summaries--------------------------------------------------------------------
samps_hier_NB <- rstan::extract(fitted_model_NB_hier)
## ----print-NB-hier-------------------------------------------------------
print(fitted_model_NB_hier, pars = c('sigma_mu','beta','alpha','phi','mu'))
## ------------------------------------------------------------------------
# use as.array to keep the markov chains separate for trace plots
mcmc_trace(
as.array(fitted_model_NB_hier,pars = 'sigma_mu'),
np = nuts_params(fitted_model_NB_hier),
window = c(500,1000)
)
## ------------------------------------------------------------------------
# assign to object so we can compare to another plot later
scatter_with_divs <- mcmc_scatter(
as.array(fitted_model_NB_hier),
pars = c("mu[4]", 'sigma_mu'),
transform = list('sigma_mu' = "log"),
np = nuts_params(fitted_model_NB_hier)
)
scatter_with_divs
## ----parallel_plot--------------------------------------------------------------------
parcoord_with_divs <- mcmc_parcoord(
as.array(fitted_model_NB_hier, pars = c("sigma_mu", "mu")),
np = nuts_params(fitted_model_NB_hier)
)
parcoord_with_divs
## ----run-NB-hier-ncp, non_centered_parametrization-----------------------------------------------------
fitted_model_NB_hier_ncp <- stan('stan_programs/hier_NB_regression_ncp.stan',
data = stan_dat_hier,
chains = 4,
#                                     cores = 4,
iter=4000)
## ----n-eff-NB-hier-ncp-check---------------------------------------------
print(fitted_model_NB_hier_ncp, pars = c('sigma_mu','beta','alpha','phi','mu'))
## ------------------------------------------------------------------------
scatter_no_divs <- mcmc_scatter(
as.array(fitted_model_NB_hier_ncp),
pars = c("mu[4]", 'sigma_mu'),
transform = list('sigma_mu' = "log"),
np = nuts_params(fitted_model_NB_hier_ncp)
)
bayesplot_grid(scatter_with_divs, scatter_no_divs,
grid_args = list(ncol = 2), ylim = c(-11, 1))
## ----parallel_plot--------------------------------------------------------------------
parcoord_no_divs <- mcmc_parcoord(
as.array(fitted_model_NB_hier_ncp, pars = c("sigma_mu", "mu")),
np = nuts_params(fitted_model_NB_hier_ncp)
)
bayesplot_grid(parcoord_with_divs, parcoord_no_divs,
ylim = c(-3, 3))
## ----samps-full-hier-----------------------------------------------------
samps_NB_hier_ncp <- rstan::extract(fitted_model_NB_hier_ncp,
pars = c('y_rep','inv_phi'))
## ----ppc-full-hier-------------------------------------------------------
y_rep <- as.matrix(fitted_model_NB_hier_ncp, pars = "y_rep")
ppc_dens_overlay(stan_dat_hier$complaints, y_rep[1:200,])
## ----ppc-group_means-hier------------------------------------------------
ppc_stat_grouped(
y = stan_dat_hier$complaints,
yrep = y_rep,
group = pest_data$building_id,
stat = 'mean',
binwidth = 0.5
)
## ----proportion_of_zero--------------------------------------------------------------------
prop_zero <- function(x) mean(x == 0)
ppc_stat(
y = stan_dat_hier$complaints,
yrep = y_rep,
stat = prop_zero,
binwidth = 0.025
)
# plot separately for each building
ppc_stat_grouped(
y = stan_dat_hier$complaints,
yrep = y_rep,
group = pest_data$building_id,
stat = prop_zero,
binwidth = 0.025
)
## ----ppc_intervals--------------------------------------------------------------------
ppc_intervals(
y = stan_dat_hier$complaints,
yrep = y_rep,
x = stan_dat_hier$traps
) +
labs(x = "Number of traps", y = "Number of complaints")
## ----standardized_residuals--------------------------------------------------------------------
mean_y_rep <- colMeans(y_rep)
mean_inv_phi <- mean(as.matrix(fitted_model_NB_hier_ncp, pars = "inv_phi"))
std_resid <- (stan_dat_hier$complaints - mean_y_rep) / sqrt(mean_y_rep + mean_y_rep^2*mean_inv_phi)
qplot(mean_y_rep, std_resid) + hline_at(2) + hline_at(-2)
